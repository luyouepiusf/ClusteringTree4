weight_left<-dplyr::case_when(
is.na(matrix_numeric[,jj])~0,
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_numeric[,jj])~0,
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~0,
TRUE~weight)
weight_column<-cbind(dplyr::case_when(
is.na(matrix_numeric[,jj])~weight,
TRUE~0))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}else if(a_table$type[idx]=="factor"){
jj<-a_table$j[idx]-ndim_numeric
weight_left<-dplyr::case_when(
is.na(matrix_factor[,jj])~0,
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_factor[,jj])~0,
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~0,
TRUE~weight)
weight_column<-cbind(dplyr::case_when(
is.na(matrix_factor[,jj])~weight,
TRUE~0))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}
}else if(missing=="weighted"){
if(a_table$terminal[idx]){
weight_column<-cbind(weight)
colnames(weight_column)<-idx
return(weight_column)
}else if(a_table$type[idx]=="numeric"){
jj<-a_table$j[idx]
weight_left<-dplyr::case_when(
is.na(matrix_numeric[,jj])~weight*a_table$w_left[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_numeric[,jj])~weight*a_table$w_right[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}else if(a_table$type[idx]=="factor"){
jj<-a_table$j[idx]-ndim_numeric
weight_left<-dplyr::case_when(
is.na(matrix_factor[,jj])~weight*a_table$w_left[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_factor[,jj])~weight*a_table$w_right[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}
}
}
weight<-calculate_weight(1,weight=rep(1,nind_test),missing=missing)
nind_test<-nrow(matrix_numeric)
# need to check if the colnames are identify
if(any(c(colnames(matrix_numeric),colnames(matrix_factor))!=survival_tree$variable_names)){
stop("column names do not match!")
}
ndim_numeric<-survival_tree$ndim_numeric
ndim_factor<-survival_tree$ndim_factor
factor_dictionary<-survival_tree$factor_dictionary
matrix_factor_int<-matrix(NA,nind_test,ndim_factor)
if(ncol(matrix_factor)>0){
colnames(matrix_factor_int)<-colnames(matrix_factor)
for(idx in 1:ncol(matrix_factor)){
aname<-colnames(matrix_factor)[idx]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
}
}
matrix_factor<-matrix_factor_int
a_table<-tree_to_table(survival_tree$survival_tree)
weight<-calculate_weight(1,weight=rep(1,nind_test),missing=missing)
library(ClusteringTree4)
weight<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
nind_test<-nrow(matrix_numeric)
# need to check if the colnames are identify
if(any(c(colnames(matrix_numeric),colnames(matrix_factor))!=survival_tree$variable_names)){
stop("column names do not match!")
}
ndim_numeric<-survival_tree$ndim_numeric
ndim_factor<-survival_tree$ndim_factor
factor_dictionary<-survival_tree$factor_dictionary
matrix_factor_int<-matrix(NA,nind_test,ndim_factor)
if(ncol(matrix_factor)>0){
colnames(matrix_factor_int)<-colnames(matrix_factor)
for(idx in 1:ncol(matrix_factor)){
aname<-colnames(matrix_factor)[idx]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
}
}
result<-predict_node(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
weight<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
nind_test<-nrow(matrix_numeric)
# need to check if the colnames are identify
if(any(c(colnames(matrix_numeric),colnames(matrix_factor))!=survival_tree$variable_names)){
stop("column names do not match!")
}
ndim_numeric<-survival_tree$ndim_numeric
ndim_factor<-survival_tree$ndim_factor
factor_dictionary<-survival_tree$factor_dictionary
matrix_factor_int<-matrix(NA,nind_test,ndim_factor)
if(ncol(matrix_factor)>0){
colnames(matrix_factor_int)<-colnames(matrix_factor)
for(idx in 1:ncol(matrix_factor)){
aname<-colnames(matrix_factor)[idx]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
}
}
matrix_factor_int
ncol(matrix_factor)>0
colnames(matrix_factor_int)<-colnames(matrix_factor)
1:ncol(matrix_factor)
idx<-1
aname<-colnames(matrix_factor)[idx]
(factor_dictionary[[aname]])[matrix_factor[,aname]]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
idx<-2
aname<-colnames(matrix_factor)[idx]
(factor_dictionary[[aname]])[matrix_factor[,aname]]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
matrix_factor
factor_dictionary<-survival_tree$factor_dictionary
matrix_factor_int<-matrix(NA,nind_test,ndim_factor)
if(ncol(matrix_factor)>0){
colnames(matrix_factor_int)<-colnames(matrix_factor)
for(idx in 1:ncol(matrix_factor)){
aname<-colnames(matrix_factor)[idx]
matrix_factor_int[,idx]<-(factor_dictionary[[aname]])[matrix_factor[,aname]]
}
}
matrix_factor<-matrix_factor_int
a_table<-tree_to_table(survival_tree$survival_tree)
calculate_weight<-function(idx,weight,missing="majority"){
if(missing=="majority"){
if(a_table$terminal[idx]){
weight_column<-cbind(weight)
colnames(weight_column)<-idx
return(weight_column)
}else if(a_table$type[idx]=="numeric"){
jj<-a_table$j[idx]
weight_left<-dplyr::case_when(
is.na(matrix_numeric[,jj])~ifelse(a_table$more_to_left[idx],weight,0),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_numeric[,jj])~ifelse(a_table$more_to_left[idx],0,weight),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}else if(a_table$type[idx]=="factor"){
jj<-a_table$j[idx]-ndim_numeric
weight_left<-dplyr::case_when(
is.na(matrix_factor[,jj])~ifelse(a_table$more_to_left[idx],weight,0),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_factor[,jj])~ifelse(a_table$more_to_left[idx],weight,0),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}
}else if(missing=="omit"){
if(a_table$terminal[idx]){
weight_column<-cbind(weight)
colnames(weight_column)<-idx
return(weight_column)
}else if(a_table$type[idx]=="numeric"){
jj<-a_table$j[idx]
weight_left<-dplyr::case_when(
is.na(matrix_numeric[,jj])~0,
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_numeric[,jj])~0,
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~0,
TRUE~weight)
weight_column<-cbind(dplyr::case_when(
is.na(matrix_numeric[,jj])~weight,
TRUE~0))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}else if(a_table$type[idx]=="factor"){
jj<-a_table$j[idx]-ndim_numeric
weight_left<-dplyr::case_when(
is.na(matrix_factor[,jj])~0,
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_factor[,jj])~0,
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~0,
TRUE~weight)
weight_column<-cbind(dplyr::case_when(
is.na(matrix_factor[,jj])~weight,
TRUE~0))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}
}else if(missing=="weighted"){
if(a_table$terminal[idx]){
weight_column<-cbind(weight)
colnames(weight_column)<-idx
return(weight_column)
}else if(a_table$type[idx]=="numeric"){
jj<-a_table$j[idx]
weight_left<-dplyr::case_when(
is.na(matrix_numeric[,jj])~weight*a_table$w_left[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_numeric[,jj])~weight*a_table$w_right[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_numeric[,jj]<=a_table$split_numeric[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}else if(a_table$type[idx]=="factor"){
jj<-a_table$j[idx]-ndim_numeric
weight_left<-dplyr::case_when(
is.na(matrix_factor[,jj])~weight*a_table$w_left[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~weight,
TRUE~0)
weight_right<-dplyr::case_when(
is.na(matrix_factor[,jj])~weight*a_table$w_right[idx]/(a_table$w_left[idx]+a_table$w_right[idx]),
matrix_factor[,jj]%in%a_table$split_factor[[idx]]~0,
TRUE~weight)
weight_column<-cbind(rep(0,nind_test))
colnames(weight_column)<-idx
return(cbind(
weight_column,
calculate_weight(a_table$left_id[idx],weight_left,missing),
calculate_weight(a_table$right_id[idx],weight_right,missing)))
}
}
}
weight<-calculate_weight(1,weight=rep(1,nind_test),missing=missing)
weight
library(ClusteringTree4)
weight<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
weight
table(rowSums(weight))
rowSums(weight)
library(ClusteringTree4)
weight_majority<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
weight_omit<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="omit")
weight_weighted<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="weighted")
rowSums(weight_majority)
rowSums(weight_omit)
rowSums(weight_weighted)
ifelse(T,1:3,2:6)
library(ClusteringTree4)
# sourceCpp("Rcpp/find_best_split_cox_bone.cpp")
# source("grow_tree.R")
# source("grow_table.R")
# source("plot_survival_tree.R")
# source("predict_survival_tree.R")
# source("survival_tree.R")
# source("utility.R")
library(ClusteringTree4)
set.seed(5)
nind<-500
ndim_numeric<-5
ndim_factor<-3
ft<-rexp(nind,3)
ct<-rexp(nind,3)
ot<-pmin(ft,ct)
delta<-ft<ct
xx_numeric<-matrix(rnorm(nind*ndim_numeric),nind,ndim_numeric)
xx_numeric[1:10,1]<-NA
xx_numeric[11:20,2]<-NA
xx_numeric[21:30,3]<-NA
xx_numeric[31:40,4]<-NA
xx_numeric[41:50,5]<-NA
colnames(xx_numeric)<-paste0("X",1:ncol(xx_numeric))
xx_factor<-matrix(NA,nind,ndim_factor)
xx_factor[,1]<-sample(c("AA","BB","CC","DD",NA),nind,replace=TRUE)
xx_factor[,2]<-sample(c("apple","banana","banana","cherry",NA),nind,replace=TRUE)
xx_factor[,3]<-sample(c("good","medium","poor",NA),nind,replace=TRUE)
# xx_factor[51:60,1]<-NA
# xx_factor[61:70,2]<-NA
# xx_factor[71:80,3]<-NA
colnames(xx_factor)<-paste0("V",1:ncol(xx_factor))
library(dplyr)
library(grid)
library(gridtext)
library(survival)
a_survival_tree<-survival_tree(
time=ot,
event=delta,
matrix_numeric=xx_numeric,
matrix_factor=xx_factor,
significance=0.05,
missing="weighted")
a_table<-tree_to_table(a_survival_tree$survival_tree)
plot_survival_tree(a_survival_tree)
nind_test<-200
set.seed(-1)
xx_numeric_test<-matrix(rnorm(nind_test*ndim_numeric),nind_test,ndim_numeric)
xx_numeric_test[1:10,1]<-NA
xx_numeric_test[11:20,2]<-NA
xx_numeric_test[21:30,3]<-NA
xx_numeric_test[31:40,4]<-NA
xx_numeric_test[41:50,5]<-NA
colnames(xx_numeric_test)<-paste0("X",1:ncol(xx_numeric_test))
xx_factor_test<-matrix(NA,nind_test,ndim_factor)
xx_factor_test[,1]<-sample(c("AA","BB","CC","DD",NA),nind_test,replace=TRUE)
xx_factor_test[,2]<-sample(c("apple","banana","banana","cherry",NA),nind_test,replace=TRUE)
xx_factor_test[,3]<-sample(c("good","medium","poor",NA),nind_test,replace=TRUE)
colnames(xx_factor_test)<-paste0("V",1:ncol(xx_factor_test))
weight_majority<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
weight_omit<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="omit")
weight_weighted<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="weighted")
rowSums(weight_majority)
rowSums(weight_omit)
rowSums(weight_weighted)
colnames(weight_majority)
colnames(weight_omit)
colnames(weight_weighted)
library(ClusteringTree4)
result<-predict_distance(a_survival_tree,xx_numeric_test,xx_factor_test)
node_distance
node_distance
node_distance
a_predict_weight
ind_distance<-a_predict_weight%*%node_distance%*%t(a_predict_weight)
ind_distance
node_distance[is.na(node_distance)]<-0
ind_distance<-a_predict_weight%*%node_distance%*%t(a_predict_weight)
ind_distance
missing
a_predict_weight
a_table$terminal
a_predict_weight
a_predict_weight[,a_table$terminal]
a_predict_weight[,!a_table$terminal]
rowSums(a_predict_weight[,!a_table$terminal])
library(ClusteringTree4)
library(ClusteringTree4)
set.seed(5)
nind<-500
ndim_numeric<-5
ndim_factor<-3
ft<-rexp(nind,3)
ct<-rexp(nind,3)
ot<-pmin(ft,ct)
delta<-ft<ct
xx_numeric<-matrix(rnorm(nind*ndim_numeric),nind,ndim_numeric)
xx_numeric[1:10,1]<-NA
xx_numeric[11:20,2]<-NA
xx_numeric[21:30,3]<-NA
xx_numeric[31:40,4]<-NA
xx_numeric[41:50,5]<-NA
colnames(xx_numeric)<-paste0("X",1:ncol(xx_numeric))
xx_factor<-matrix(NA,nind,ndim_factor)
xx_factor[,1]<-sample(c("AA","BB","CC","DD",NA),nind,replace=TRUE)
xx_factor[,2]<-sample(c("apple","banana","banana","cherry",NA),nind,replace=TRUE)
xx_factor[,3]<-sample(c("good","medium","poor",NA),nind,replace=TRUE)
# xx_factor[51:60,1]<-NA
# xx_factor[61:70,2]<-NA
# xx_factor[71:80,3]<-NA
colnames(xx_factor)<-paste0("V",1:ncol(xx_factor))
library(dplyr)
library(grid)
library(gridtext)
library(survival)
a_survival_tree<-survival_tree(
time=ot,
event=delta,
matrix_numeric=xx_numeric,
matrix_factor=xx_factor,
significance=0.05,
missing="weighted")
a_table<-tree_to_table(a_survival_tree$survival_tree)
plot_survival_tree(a_survival_tree)
nind_test<-200
set.seed(-1)
xx_numeric_test<-matrix(rnorm(nind_test*ndim_numeric),nind_test,ndim_numeric)
xx_numeric_test[1:10,1]<-NA
xx_numeric_test[11:20,2]<-NA
xx_numeric_test[21:30,3]<-NA
xx_numeric_test[31:40,4]<-NA
xx_numeric_test[41:50,5]<-NA
colnames(xx_numeric_test)<-paste0("X",1:ncol(xx_numeric_test))
xx_factor_test<-matrix(NA,nind_test,ndim_factor)
xx_factor_test[,1]<-sample(c("AA","BB","CC","DD",NA),nind_test,replace=TRUE)
xx_factor_test[,2]<-sample(c("apple","banana","banana","cherry",NA),nind_test,replace=TRUE)
xx_factor_test[,3]<-sample(c("good","medium","poor",NA),nind_test,replace=TRUE)
colnames(xx_factor_test)<-paste0("V",1:ncol(xx_factor_test))
weight_majority<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="majority")
weight_omit<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="omit")
weight_weighted<-predict_weight(a_survival_tree,xx_numeric_test,xx_factor_test,missing="weighted")
rowSums(weight_majority)
rowSums(weight_omit)
rowSums(weight_weighted)
predict_distance
args(predict_distance)
result_majority<-predict_distance(a_survival_tree,xx_numeric_test,xx_factor_test,majority)
library(ClusteringTree4)
result_majority<-predict_distance(a_survival_tree,xx_numeric_test,xx_factor_test,"majority")
result_omit<-predict_distance(a_survival_tree,xx_numeric_test,xx_factor_test,"omit")
result_weighted<-predict_distance(a_survival_tree,xx_numeric_test,xx_factor_test,"weighted")
result_majority
image(result_majority$ind_distance)
heatmap(result_majority$ind_distance)
heatmap(result_majority$result_omit)
result_majority$result_omit
heatmap(result_omit$ind_distance)
temp<-result_omit$ind_distance
temp[is.na(temp)]<-1000
heatmap(result_omit$ind_distance)
heatmap(temp)
temp
heatmap(result_weighted$ind_distance)
temp<-result_omit$ind_distance
temp[is.na(temp)]<-100
heatmap(temp)
temp<-result_omit$ind_distance
temp[is.na(temp)]<-20
heatmap(temp)
result_omit$ind_distance
image(temp)
image(result_omit$ind_distance)
diag(temp)
diag(result_omit$ind_distance)
temp
View(result_omit$ind_distance)
library(ClusteringTree4)
a_table
library(ClusteringTree4)
set.seed(5)
nind<-500
ndim_numeric<-5
ndim_factor<-3
ft<-rexp(nind,3)
ct<-rexp(nind,3)
ot<-pmin(ft,ct)
delta<-ft<ct
xx_numeric<-matrix(rnorm(nind*ndim_numeric),nind,ndim_numeric)
xx_numeric[1:10,1]<-NA
xx_numeric[11:20,2]<-NA
xx_numeric[21:30,3]<-NA
xx_numeric[31:40,4]<-NA
xx_numeric[41:50,5]<-NA
colnames(xx_numeric)<-paste0("X",1:ncol(xx_numeric))
xx_factor<-matrix(NA,nind,ndim_factor)
xx_factor[,1]<-sample(c("AA","BB","CC","DD",NA),nind,replace=TRUE)
xx_factor[,2]<-sample(c("apple","banana","banana","cherry",NA),nind,replace=TRUE)
xx_factor[,3]<-sample(c("good","medium","poor",NA),nind,replace=TRUE)
# xx_factor[51:60,1]<-NA
# xx_factor[61:70,2]<-NA
# xx_factor[71:80,3]<-NA
colnames(xx_factor)<-paste0("V",1:ncol(xx_factor))
library(dplyr)
library(grid)
library(gridtext)
library(survival)
a_survival_tree<-survival_tree(
time=ot,
event=delta,
matrix_numeric=xx_numeric,
matrix_factor=xx_factor,
significance=0.05,
missing="weighted")
a_table<-tree_to_table(a_survival_tree$survival_tree)
a_table
a_table$survival
a_table$survival[[1]]
a_table$survival[[2]]
library(ClusteringTree4)
set.seed(5)
library(ClusteringTree4)
